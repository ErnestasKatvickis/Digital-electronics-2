
fifth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002f4  00000368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000103d  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008da  00000000  00000000  000014d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000681  00000000  00000000  00001dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  0000242c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e6  00000000  00000000  00002590  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005e5  00000000  00000000  00002a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000305b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8e:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num) //Configure one input pin in DDR and enable pull-up resistor
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIO_config_output+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIO_config_output+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num) //Set one output pin in PORT register to low
{
  ae:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_write_low+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_write_low+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <GPIO_write_high>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num) //Set one output pin in PORT register to high
{
	*reg_name = *reg_name | (1<<pin_num);
  c8:	fc 01       	movw	r30, r24
  ca:	40 81       	ld	r20, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_write_high+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_write_high+0xa>
  da:	24 2b       	or	r18, r20
  dc:	20 83       	st	Z, r18
  de:	08 95       	ret

000000e0 <main>:
 * Timer/Counter1 overflows.
 */
int main(void)
{
    // Configure SSD signals
    SEG_init();
  e0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(3, 0);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	0e 94 05 01 	call	0x20a	; 0x20a <SEG_update_shift_regs>

    /* Configure 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
	TIM1_overflow_1s();
  ec:	e1 e8       	ldi	r30, 0x81	; 129
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8c 7f       	andi	r24, 0xFC	; 252
  f4:	80 83       	st	Z, r24
  f6:	80 81       	ld	r24, Z
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
  fc:	ef e6       	ldi	r30, 0x6F	; 111
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	81 60       	ori	r24, 0x01	; 1
 104:	80 83       	st	Z, r24
    // Enables interrupts by setting the global interrupt mask
	sei();
 106:	78 94       	sei
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0x28>

0000010a <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Increment decimal counter
 * value and display it on SSD.
 */
ISR(TIMER1_OVF_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
		_delay_ms(100);
		
		SEG_update_shift_regs(i/10, poss+1);
		_delay_ms(100);
	}*/
	 SEG_update_shift_regs(0,0);
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 05 01 	call	0x20a	; 0x20a <SEG_update_shift_regs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	83 ec       	ldi	r24, 0xC3	; 195
 138:	99 e0       	ldi	r25, 0x09	; 9
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <__vector_13+0x30>
 142:	00 c0       	rjmp	.+0      	; 0x144 <__vector_13+0x3a>
 144:	00 00       	nop
	 _delay_ms(200);
	 SEG_update_shift_regs(1,0);
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 05 01 	call	0x20a	; 0x20a <SEG_update_shift_regs>
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	83 ec       	ldi	r24, 0xC3	; 195
 152:	99 e0       	ldi	r25, 0x09	; 9
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <__vector_13+0x4a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <__vector_13+0x54>
 15e:	00 00       	nop
	 _delay_ms(200);
	 SEG_update_shift_regs(2,0);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	0e 94 05 01 	call	0x20a	; 0x20a <SEG_update_shift_regs>
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	83 ec       	ldi	r24, 0xC3	; 195
 16c:	99 e0       	ldi	r25, 0x09	; 9
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <__vector_13+0x64>
 176:	00 c0       	rjmp	.+0      	; 0x178 <__vector_13+0x6e>
 178:	00 00       	nop
	 _delay_ms(200);
	 SEG_update_shift_regs(3,0);
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	0e 94 05 01 	call	0x20a	; 0x20a <SEG_update_shift_regs>
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	83 ec       	ldi	r24, 0xC3	; 195
 186:	99 e0       	ldi	r25, 0x09	; 9
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <__vector_13+0x7e>
 190:	00 c0       	rjmp	.+0      	; 0x192 <__vector_13+0x88>
 192:	00 00       	nop
	 _delay_ms(200);
	 SEG_update_shift_regs(4,0);
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	0e 94 05 01 	call	0x20a	; 0x20a <SEG_update_shift_regs>
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	83 ec       	ldi	r24, 0xC3	; 195
 1a0:	99 e0       	ldi	r25, 0x09	; 9
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <__vector_13+0x98>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <__vector_13+0xa2>
 1ac:	00 00       	nop
	 _delay_ms(200);
	 SEG_update_shift_regs(5,0);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	0e 94 05 01 	call	0x20a	; 0x20a <SEG_update_shift_regs>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	83 ec       	ldi	r24, 0xC3	; 195
 1ba:	99 e0       	ldi	r25, 0x09	; 9
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <__vector_13+0xb2>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <__vector_13+0xbc>
 1c6:	00 00       	nop
	 _delay_ms(200);
}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	7f 91       	pop	r23
 1d6:	6f 91       	pop	r22
 1d8:	5f 91       	pop	r21
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <SEG_init>:

/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 1ea:	64 e0       	ldi	r22, 0x04	; 4
 1ec:	8a e2       	ldi	r24, 0x2A	; 42
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 1f4:	67 e0       	ldi	r22, 0x07	; 7
 1f6:	8a e2       	ldi	r24, 0x2A	; 42
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	84 e2       	ldi	r24, 0x24	; 36
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
 208:	08 95       	ret

0000020a <SEG_update_shift_regs>:
}

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
    uint8_t bit_number;
	segments = segment_value[segments];     // 0, 1, ..., 9
 210:	e8 2f       	mov	r30, r24
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	ec 5f       	subi	r30, 0xFC	; 252
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	10 81       	ld	r17, Z
	position = segment_position[position];  // 0, 1, 2, 3
 21a:	e6 2f       	mov	r30, r22
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	e0 50       	subi	r30, 0x00	; 0
 220:	ff 4f       	sbci	r31, 0xFF	; 255
 222:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD, SEGMENT_LATCH);  //LATCH
 224:	64 e0       	ldi	r22, 0x04	; 4
 226:	8b e2       	ldi	r24, 0x2B	; 43
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_CLK);  //CLK
 22e:	67 e0       	ldi	r22, 0x07	; 7
 230:	8b e2       	ldi	r24, 0x2B	; 43
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	GPIO_write_low(&PORTB, SEGMENT_DATA);  //DATA
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	85 e2       	ldi	r24, 0x25	; 37
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	8a 95       	dec	r24
 246:	f1 f7       	brne	.-4      	; 0x244 <SEG_update_shift_regs+0x3a>
 248:	00 00       	nop
 24a:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "segments")
		if ((segments % 2) == 0)  //LSB is 0
 24c:	10 fd       	sbrc	r17, 0
 24e:	06 c0       	rjmp	.+12     	; 0x25c <SEG_update_shift_regs+0x52>
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	85 e2       	ldi	r24, 0x25	; 37
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 25a:	05 c0       	rjmp	.+10     	; 0x266 <SEG_update_shift_regs+0x5c>
		else
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	85 e2       	ldi	r24, 0x25	; 37
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 266:	85 e0       	ldi	r24, 0x05	; 5
 268:	8a 95       	dec	r24
 26a:	f1 f7       	brne	.-4      	; 0x268 <SEG_update_shift_regs+0x5e>
 26c:	00 00       	nop
        // Wait 1 us
		_delay_us(1);
        // Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 26e:	67 e0       	ldi	r22, 0x07	; 7
 270:	8b e2       	ldi	r24, 0x2B	; 43
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 278:	85 e0       	ldi	r24, 0x05	; 5
 27a:	8a 95       	dec	r24
 27c:	f1 f7       	brne	.-4      	; 0x27a <SEG_update_shift_regs+0x70>
 27e:	00 00       	nop
        // Wait 1 us
		_delay_us(1);
        // Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 280:	67 e0       	ldi	r22, 0x07	; 7
 282:	8b e2       	ldi	r24, 0x2B	; 43
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 28a:	16 95       	lsr	r17
 28c:	c1 50       	subi	r28, 0x01	; 1
    // Wait 1 us
	_delay_us(1);
	
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 28e:	f1 f6       	brne	.-68     	; 0x24c <SEG_update_shift_regs+0x42>
 290:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "position")
		if ((position % 2) == 0)  //LSB is 0
 292:	d0 fd       	sbrc	r29, 0
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <SEG_update_shift_regs+0x98>
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	85 e2       	ldi	r24, 0x25	; 37
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <SEG_update_shift_regs+0xa2>
		else
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	85 e2       	ldi	r24, 0x25	; 37
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 2ac:	85 e0       	ldi	r24, 0x05	; 5
 2ae:	8a 95       	dec	r24
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <SEG_update_shift_regs+0xa4>
 2b2:	00 00       	nop
        // Wait 1 us
		_delay_us(1);
        // Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 2b4:	67 e0       	ldi	r22, 0x07	; 7
 2b6:	8b e2       	ldi	r24, 0x2B	; 43
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 2be:	85 e0       	ldi	r24, 0x05	; 5
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <SEG_update_shift_regs+0xb6>
 2c4:	00 00       	nop
        // Wait 1 us
		_delay_us(1);
        // Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 2c6:	67 e0       	ldi	r22, 0x07	; 7
 2c8:	8b e2       	ldi	r24, 0x2B	; 43
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 2d0:	d6 95       	lsr	r29
 2d2:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2d4:	f1 f6       	brne	.-68     	; 0x292 <SEG_update_shift_regs+0x88>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
	GPIO_write_high(&PORTD, SEGMENT_LATCH);
 2d6:	64 e0       	ldi	r22, 0x04	; 4
 2d8:	8b e2       	ldi	r24, 0x2B	; 43
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 2e0:	85 e0       	ldi	r24, 0x05	; 5
 2e2:	8a 95       	dec	r24
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <SEG_update_shift_regs+0xd8>
 2e6:	00 00       	nop
    // Wait 1 us
	_delay_us(1);
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	08 95       	ret

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
