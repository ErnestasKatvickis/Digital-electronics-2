
second.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088c  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a2  00000000  00000000  0000116f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000240  00000000  00000000  000018db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 * when a push button is pressed.
 */
int main(void)
{
    // Set pins as output in Data Direction Register...
    DDRB = DDRB | (1<<LED_1);
  80:	21 9a       	sbi	0x04, 1	; 4
	DDRB = DDRB | (1<<LED_2);
  82:	23 9a       	sbi	0x04, 3	; 4
	DDRB = DDRB | (1<<LED_3);
  84:	25 9a       	sbi	0x04, 5	; 4
	DDRC = DDRC | (1<<LED_4);
  86:	39 9a       	sbi	0x07, 1	; 7
	DDRC = DDRC | (1<<LED_5);
  88:	3b 9a       	sbi	0x07, 3	; 7
    // ...and turn LEDs off in Data Register
    PORTB = PORTB & ~(1<<LED_1); //TURN OFF
  8a:	29 98       	cbi	0x05, 1	; 5
	PORTB = PORTB & ~(1<<LED_2);
  8c:	2b 98       	cbi	0x05, 3	; 5
	PORTB = PORTB & ~(1<<LED_3);
  8e:	2d 98       	cbi	0x05, 5	; 5
	PORTC = PORTC & ~(1<<LED_4);
  90:	41 98       	cbi	0x08, 1	; 8
	PORTC = PORTC & ~(1<<LED_5);
  92:	43 98       	cbi	0x08, 3	; 8
    // Infinite loop
    while (1)
    {
        // Pause several milliseconds

			PORTB = PORTB ^ (1<<LED_1); //TURN ON FIRST LED
  94:	92 e0       	ldi	r25, 0x02	; 2
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_1); //TURN OFF FIRST LED
			PORTB = PORTB ^ (1<<LED_2); //AT THE SAME TIME THE SECOND ONE TURNS ON
  96:	88 e0       	ldi	r24, 0x08	; 8
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_2);
			PORTB = PORTB ^ (1<<LED_3);
  98:	20 e2       	ldi	r18, 0x20	; 32
    // Infinite loop
    while (1)
    {
        // Pause several milliseconds

			PORTB = PORTB ^ (1<<LED_1); //TURN ON FIRST LED
  9a:	35 b1       	in	r19, 0x05	; 5
  9c:	39 27       	eor	r19, r25
  9e:	35 b9       	out	0x05, r19	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	3f ef       	ldi	r19, 0xFF	; 255
  a2:	42 e5       	ldi	r20, 0x52	; 82
  a4:	57 e0       	ldi	r21, 0x07	; 7
  a6:	31 50       	subi	r19, 0x01	; 1
  a8:	40 40       	sbci	r20, 0x00	; 0
  aa:	50 40       	sbci	r21, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x30>
  b0:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_1); //TURN OFF FIRST LED
  b2:	35 b1       	in	r19, 0x05	; 5
  b4:	39 27       	eor	r19, r25
  b6:	35 b9       	out	0x05, r19	; 5
			PORTB = PORTB ^ (1<<LED_2); //AT THE SAME TIME THE SECOND ONE TURNS ON
  b8:	35 b1       	in	r19, 0x05	; 5
  ba:	38 27       	eor	r19, r24
  bc:	35 b9       	out	0x05, r19	; 5
  be:	3f ef       	ldi	r19, 0xFF	; 255
  c0:	42 e5       	ldi	r20, 0x52	; 82
  c2:	57 e0       	ldi	r21, 0x07	; 7
  c4:	31 50       	subi	r19, 0x01	; 1
  c6:	40 40       	sbci	r20, 0x00	; 0
  c8:	50 40       	sbci	r21, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x44>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4e>
  ce:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_2);
  d0:	35 b1       	in	r19, 0x05	; 5
  d2:	38 27       	eor	r19, r24
  d4:	35 b9       	out	0x05, r19	; 5
			PORTB = PORTB ^ (1<<LED_3);
  d6:	35 b1       	in	r19, 0x05	; 5
  d8:	32 27       	eor	r19, r18
  da:	35 b9       	out	0x05, r19	; 5
  dc:	3f ef       	ldi	r19, 0xFF	; 255
  de:	42 e5       	ldi	r20, 0x52	; 82
  e0:	57 e0       	ldi	r21, 0x07	; 7
  e2:	31 50       	subi	r19, 0x01	; 1
  e4:	40 40       	sbci	r20, 0x00	; 0
  e6:	50 40       	sbci	r21, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x62>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x6c>
  ec:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_3);
  ee:	35 b1       	in	r19, 0x05	; 5
  f0:	32 27       	eor	r19, r18
  f2:	35 b9       	out	0x05, r19	; 5
			PORTC = PORTC ^ (1<<LED_4);
  f4:	38 b1       	in	r19, 0x08	; 8
  f6:	39 27       	eor	r19, r25
  f8:	38 b9       	out	0x08, r19	; 8
  fa:	3f ef       	ldi	r19, 0xFF	; 255
  fc:	42 e5       	ldi	r20, 0x52	; 82
  fe:	57 e0       	ldi	r21, 0x07	; 7
 100:	31 50       	subi	r19, 0x01	; 1
 102:	40 40       	sbci	r20, 0x00	; 0
 104:	50 40       	sbci	r21, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x80>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x8a>
 10a:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC ^ (1<<LED_4);
 10c:	38 b1       	in	r19, 0x08	; 8
 10e:	39 27       	eor	r19, r25
 110:	38 b9       	out	0x08, r19	; 8
			PORTC = PORTC ^ (1<<LED_5);
 112:	38 b1       	in	r19, 0x08	; 8
 114:	38 27       	eor	r19, r24
 116:	38 b9       	out	0x08, r19	; 8
 118:	3f ef       	ldi	r19, 0xFF	; 255
 11a:	42 e5       	ldi	r20, 0x52	; 82
 11c:	57 e0       	ldi	r21, 0x07	; 7
 11e:	31 50       	subi	r19, 0x01	; 1
 120:	40 40       	sbci	r20, 0x00	; 0
 122:	50 40       	sbci	r21, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x9e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0xa8>
 128:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC ^ (1<<LED_5);
 12a:	38 b1       	in	r19, 0x08	; 8
 12c:	38 27       	eor	r19, r24
 12e:	38 b9       	out	0x08, r19	; 8
			PORTC = PORTC ^ (1<<LED_4);
 130:	38 b1       	in	r19, 0x08	; 8
 132:	39 27       	eor	r19, r25
 134:	38 b9       	out	0x08, r19	; 8
 136:	3f ef       	ldi	r19, 0xFF	; 255
 138:	42 e5       	ldi	r20, 0x52	; 82
 13a:	57 e0       	ldi	r21, 0x07	; 7
 13c:	31 50       	subi	r19, 0x01	; 1
 13e:	40 40       	sbci	r20, 0x00	; 0
 140:	50 40       	sbci	r21, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0xbc>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xc6>
 146:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC ^ (1<<LED_4);
 148:	38 b1       	in	r19, 0x08	; 8
 14a:	39 27       	eor	r19, r25
 14c:	38 b9       	out	0x08, r19	; 8
			PORTB = PORTB ^ (1<<LED_3);
 14e:	35 b1       	in	r19, 0x05	; 5
 150:	32 27       	eor	r19, r18
 152:	35 b9       	out	0x05, r19	; 5
 154:	3f ef       	ldi	r19, 0xFF	; 255
 156:	42 e5       	ldi	r20, 0x52	; 82
 158:	57 e0       	ldi	r21, 0x07	; 7
 15a:	31 50       	subi	r19, 0x01	; 1
 15c:	40 40       	sbci	r20, 0x00	; 0
 15e:	50 40       	sbci	r21, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0xda>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0xe4>
 164:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_3);
 166:	35 b1       	in	r19, 0x05	; 5
 168:	32 27       	eor	r19, r18
 16a:	35 b9       	out	0x05, r19	; 5
			PORTB = PORTB ^ (1<<LED_2);
 16c:	35 b1       	in	r19, 0x05	; 5
 16e:	38 27       	eor	r19, r24
 170:	35 b9       	out	0x05, r19	; 5
 172:	3f ef       	ldi	r19, 0xFF	; 255
 174:	42 e5       	ldi	r20, 0x52	; 82
 176:	57 e0       	ldi	r21, 0x07	; 7
 178:	31 50       	subi	r19, 0x01	; 1
 17a:	40 40       	sbci	r20, 0x00	; 0
 17c:	50 40       	sbci	r21, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0xf8>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x102>
 182:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB ^ (1<<LED_2);
 184:	35 b1       	in	r19, 0x05	; 5
 186:	38 27       	eor	r19, r24
 188:	35 b9       	out	0x05, r19	; 5
 18a:	87 cf       	rjmp	.-242    	; 0x9a <main+0x1a>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
